/**
 * 
    ChessFlash is a Flash based chess game (pgn file) viewer.
    Copyright 2008, 2009 Glenn Wilson.
    
    This file is part of ChessFlash.
 
    ChessFlash is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChessFlash is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChessFlash.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package chessflash.view {

	import flash.display.Shape;
	import flash.display.SimpleButton;
	import flash.display.Sprite;
	
  public class BtnBase extends SimpleButton {
		protected var _width:uint;
		protected var _height:uint;
		
		protected var _foreground:uint;
		protected var _background:uint;
		protected var _lm:LayoutManager;
		protected var _alphaDisabled: Number = 0.25;
		protected var _alphaUp: Number = 0.75;
		protected var _alphaOver: Number = 1.0;
		protected var _lineStyleWidth: Number = 2.0;
		protected var _up:Boolean;
		protected var _name:String; // name of board for this, if applicable
		
/// Constructor
		
		public function BtnBase(width:uint, height:uint, lm:LayoutManager, 
				up:Boolean = true, name:String = LayoutManager.BV_MAIN){
		
			_lm = lm;
			_width = width;
			_height = height;
			_up = up;
			_name = name;
			_foreground = _lm.getDarkColor(_name);
			_background = _lm.getBorderColor(_name);
			_lineStyleWidth = _width / 15;

			upState = createUpState();
			overState = createOverState(false);
			downState = createOverState(true);
			hitTestState = upState;
			this.focusRect = false;
		}

/// Override Protected Functions		
		
		override public function set enabled(value:Boolean):void {
			if (!value && super.enabled) {
				overState.alpha = _alphaDisabled;
				upState.alpha = _alphaDisabled;
				super.enabled = value;
			} else if (value && !super.enabled) {
				upState.alpha = _alphaUp;
				overState.alpha = _alphaOver;
				super.enabled = value;

			}
		}

/// Virtual Protected Functions	

		virtual protected function createUpState(): Sprite {
			return null;
		}
		
		virtual protected function createOverState(down:Boolean): Sprite {
			return null;
		}

		virtual protected function createBackground(): Shape {
			var border:int = 4; // border for focus highlight
			var rect:Shape = new Shape();
			rect.graphics.lineStyle(1, _background,0);
			rect.graphics.beginFill(_background, 0);
			rect.graphics.drawRect(0, 0, _width + border * 2, _height + border * 2);
			rect.graphics.endFill();
			rect.x = -border;
			rect.y = -border;
			return rect;
		}
	}
}